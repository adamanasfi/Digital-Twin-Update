//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.CustomedInterfaces
{
    [Serializable]
    public class KobukiStatusMsg : Message
    {
        public const string k_RosMessageName = "customed_interfaces/KobukiStatus";
        public override string RosMessageName => k_RosMessageName;

        public string name;
        // from irobot_create_msgs/msg/WheelVels.msg
        public float velocity_left;
        //  Velocity measure for left wheel in rad/sec.
        public float velocity_right;
        //  Velocity measure for right wheel in rad/sec.
        public float linear_velocity;
        //  Linear velocity measure in m/s.
        public float angular_velocity;
        //  Angular velocity measure in rad/sec.
        // from irobot_create_msgs/msg/WheelStatus.msg
        public short current_ma_right;
        //  Current measurement for right wheel in milliamps
        public short current_ma_left;
        //  Current measurement for left wheel in milliamps 
        public short pwm_left;
        //  PWM % duty cycle measurement (where int16::max is +100%) for left wheel 
        public short pwm_right;
        //  PWM % duty cycle measurement (where int16::max is +100%) for right wheel
        public bool wheels_enabled;
        //  Whether wheels are enabled or disabled (disabled when E-Stopped)
        // from sensor_msgs/msg/BatteryState.msg
        public float voltage;
        //  Voltage in Volts (Mandatory)
        public float temperature;
        //  Temperature in Degrees Celsius (If unmeasured NaN)
        public float current;
        //  Negative when discharging (A)  (If unmeasured NaN)
        public float percentage;
        //  Charge percentage on 0 to 1 range  (If unmeasured NaN)
        // navigation_path
        public Nav.PathMsg path;

        public KobukiStatusMsg()
        {
            this.name = "";
            this.velocity_left = 0.0f;
            this.velocity_right = 0.0f;
            this.linear_velocity = 0.0f;
            this.angular_velocity = 0.0f;
            this.current_ma_right = 0;
            this.current_ma_left = 0;
            this.pwm_left = 0;
            this.pwm_right = 0;
            this.wheels_enabled = false;
            this.voltage = 0.0f;
            this.temperature = 0.0f;
            this.current = 0.0f;
            this.percentage = 0.0f;
            this.path = new Nav.PathMsg();
        }

        public KobukiStatusMsg(string name, float velocity_left, float velocity_right, float linear_velocity, float angular_velocity, short current_ma_right, short current_ma_left, short pwm_left, short pwm_right, bool wheels_enabled, float voltage, float temperature, float current, float percentage, Nav.PathMsg path)
        {
            this.name = name;
            this.velocity_left = velocity_left;
            this.velocity_right = velocity_right;
            this.linear_velocity = linear_velocity;
            this.angular_velocity = angular_velocity;
            this.current_ma_right = current_ma_right;
            this.current_ma_left = current_ma_left;
            this.pwm_left = pwm_left;
            this.pwm_right = pwm_right;
            this.wheels_enabled = wheels_enabled;
            this.voltage = voltage;
            this.temperature = temperature;
            this.current = current;
            this.percentage = percentage;
            this.path = path;
        }

        public static KobukiStatusMsg Deserialize(MessageDeserializer deserializer) => new KobukiStatusMsg(deserializer);

        private KobukiStatusMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.name);
            deserializer.Read(out this.velocity_left);
            deserializer.Read(out this.velocity_right);
            deserializer.Read(out this.linear_velocity);
            deserializer.Read(out this.angular_velocity);
            deserializer.Read(out this.current_ma_right);
            deserializer.Read(out this.current_ma_left);
            deserializer.Read(out this.pwm_left);
            deserializer.Read(out this.pwm_right);
            deserializer.Read(out this.wheels_enabled);
            deserializer.Read(out this.voltage);
            deserializer.Read(out this.temperature);
            deserializer.Read(out this.current);
            deserializer.Read(out this.percentage);
            this.path = Nav.PathMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.name);
            serializer.Write(this.velocity_left);
            serializer.Write(this.velocity_right);
            serializer.Write(this.linear_velocity);
            serializer.Write(this.angular_velocity);
            serializer.Write(this.current_ma_right);
            serializer.Write(this.current_ma_left);
            serializer.Write(this.pwm_left);
            serializer.Write(this.pwm_right);
            serializer.Write(this.wheels_enabled);
            serializer.Write(this.voltage);
            serializer.Write(this.temperature);
            serializer.Write(this.current);
            serializer.Write(this.percentage);
            serializer.Write(this.path);
        }

        public override string ToString()
        {
            return "KobukiStatusMsg: " +
            "\nname: " + name.ToString() +
            "\nvelocity_left: " + velocity_left.ToString() +
            "\nvelocity_right: " + velocity_right.ToString() +
            "\nlinear_velocity: " + linear_velocity.ToString() +
            "\nangular_velocity: " + angular_velocity.ToString() +
            "\ncurrent_ma_right: " + current_ma_right.ToString() +
            "\ncurrent_ma_left: " + current_ma_left.ToString() +
            "\npwm_left: " + pwm_left.ToString() +
            "\npwm_right: " + pwm_right.ToString() +
            "\nwheels_enabled: " + wheels_enabled.ToString() +
            "\nvoltage: " + voltage.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\ncurrent: " + current.ToString() +
            "\npercentage: " + percentage.ToString() +
            "\npath: " + path.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
